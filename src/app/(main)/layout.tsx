import "./globals.css";
import { Inter } from "next/font/google";
import dynamic from "next/dynamic";
import PageSettingProvider from "@/contexts/PageSettingContext";
import AdProvider from "@/contexts/AdContext";
import axios from "axios";
import BannerProvider from "@/contexts/bannerContext";
import CompanyContextProvider from "@/contexts/CompanyContext";
import FilterContextProvider from "@/contexts/FilterContext";
import TopBar from "@/components/index/TopBar/TopBar";
import Footer from "@/components/index/Footer/Footer";

const TwElementCom = dynamic(
  () => import("@/components/twElementCom/twElementCom"),
  {
    ssr: false,
  }
);

const inter = Inter({ subsets: ["latin"] });

export const metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

const fetchBanner = async () => {
  const response = await fetch(
    `${process.env.NEXT_PUBLIC_APP_URL}/api/banner-setting`,
    {
      cache: "no-store",
    }
  );

  const data = await response.json();
  const displayedBanners = data
    .filter((i: any) => i?.status)
    .sort((a: any, b: any) => a.edition - b.edition);
  return displayedBanners;
};

const fetchAdTry = async () => {
  const response = await fetch(
    `${process.env.NEXT_PUBLIC_APP_URL}/api/ad-setting`,
    {
      cache: "no-store",
    }
  );

  const data = await response.json();
  const displayedAds = data
    .filter((i: any) => i?.status)
    .sort((a: any, b: any) => a.edition - b.edition);
  return displayedAds;
};
// fetchPageSetting
const fetchPageSetting = async () => {
  const response = await fetch(
    `${process.env.NEXT_PUBLIC_APP_URL}/api/page-setting`,
    {
      cache: "no-store",
      // next: { revalidate: 5 },
    }
  );
  const data = await response.json();

  return data;
};
const fetchFilter = async () => {
  const response = await axios.get(
    `${process.env.NEXT_PUBLIC_APP_URL}/api/filter-setting`
  );
  return response?.data?.filters;
};

const fetchCompany = async () => {
  const response = await axios.get(
    `${process.env.NEXT_PUBLIC_APP_URL}/api/company-setting`
  );
  return response?.data?.companySetting;
};

const fetchBlog = async () => {
  const response = await axios.get(
    `${process.env.NEXT_PUBLIC_APP_URL}/api/blogs`
  );
  return response?.data?.blogSetting?.filter(
    (i: any) => i?.status && !i?.delete
  );
};
export default async function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const pageSettingData = await fetchPageSetting();
  const adData = await fetchAdTry();
  const bannerData = await fetchBanner();
  const companiesData = await fetchCompany();
  const filtersFromMain = await fetchFilter();
  const blogsData = await fetchBlog();
  // const companyPageData = await fetchCompany();

  return (
    <html lang="en">
      <body className={inter.className}>
        <FilterContextProvider filtersFromMain={filtersFromMain}>
          <CompanyContextProvider
            companyData={companiesData}
            blogData={blogsData}
          >
            <BannerProvider bannerPage={bannerData}>
              <AdProvider adsPage={adData}>
                <PageSettingProvider pageSetting={pageSettingData.pageSetting}>
                  {children}

                  <Footer />
                  <TwElementCom />
                </PageSettingProvider>
              </AdProvider>
            </BannerProvider>
          </CompanyContextProvider>
        </FilterContextProvider>
      </body>
    </html>
  );
}
